# I had issues with autodetect_column_names => "true", but will likely test it again to avoid maintaining all these column names long-term
# https://www.elastic.co/guide/en/logstash/current/plugins-filters-csv.html#plugins-filters-csv-autodetect_column_names

input {
  beats {
    port => 31337
  }
}


filter {
  if "threcon" in [tags] {
    date {
      match => [ "DateScanned", "ISO8601" ]
      target => "DateScanned"
    }
    mutate {
      lowercase => [ "message" ]
    }
  }

  if "arp" in [tags] {
    csv {
      columns => ["Computer","DateScanned","IfIndex","InterfaceAlias","IPAdress","LinkLayerAddress","State","PolicyStore"]
    }
  }

  if "ads" in [tags] {
    csv {
      columns => ["Computer","DateScanned","FileName","StreamName","StreamLength","StreamContent","Attributes","CreationTimeUtc","LastAccessTimeUtc","LastWriteTimeUtc"]
    }
  }

  if "autoruns" in [tags] {
    csv {
      columns => ["Computer","DateScanned","User","Caption","Command","Location","Name","UserSID"]
    }
  }

  if "bitlocker" in [tags] {
    csv {
      columns => ["Computer","DateScanned","ComputerName","MountPoint","EncryptionMethod","AutoUnlockEnabled","MetadataVersion","VolumeStatus","ProtectionStatus","LockStatus","EncryptionPercentage","WipePercentage","VolumeType","CapacityGB","KeyProtector"]
    }
  }

  if "certificates" in [tags] {
    csv {
      columns => ["Computer","DateScanned","Path","Thumbprint","SendAsTrustedIssuer","DnsNameList","FriendlyName","Issuer","Subject","NotAfter","NotBefore","Algorithm"]
    }
  }

  if "computer" in [tags] {
    csv {
      columns => ["Computer","DateScanned","BootDevice","BuildNumber","Caption","CurrentTimeZone","DataExecutionPrevention_32BitApplications","DataExecutionPrevention_Available","DataExecutionPrevention_Drivers","DataExecutionPrevention_SupportPolicy","Debug","Description","Distributed","EncryptionLevel","InstallDate","LastBootUpTime","LocalDateTime","MUILanguages","OSArchitecture","OSProductSuite","OSType","OperatingSystemSKU","Organization","OtherTypeDescription","PortableOperatingSystem","ProductType","RegisteredUser","ServicePackMajorVersion","ServicePackMinorVersion","Status","SuiteMask","SystemDevice","SystemDirectory","SystemDrive","Version","WindowsDirectory","AdminPasswordStatus","BootROMSupported","BootupState","ChassisBootupState","DNSHostName","DaylightInEffect","Domain","DomainRole","EnableDaylightSavingsTime","HypervisorPresent","Manufacturer","Model","NetworkServerModeEnabled","PrimaryOwnerContact","PrimaryOwnerName","SupportContactDescription","SystemSKUNumber","ThermalState","UserName","BIOSVersion","BIOSInstallDate","BIOSManufacturer","PrimaryBIOS","BIOSReleaseDate","SMBIOSBIOSVersion","SMBIOSMajorVersion","SMBIOSMinorVersion","SMBIOSPresent","SerialNumber","SystemBiosMajorVersion","SystemBiosMinorVersion","VirtualizationFirmwareEnabled"]
    }
  }

  if "dlls" in [tags] {
    csv {
      columns => ["Computer","DateScanned","ProcessID","Process","DLLName","DLLCompany","DLLProduct"]
    }
  }

  if "dns" in [tags] {
    csv {
      columns => ["Computer","DateScanned","Status","DataLength","RecordResponse","TTL","RecordType","Record","Entry","RecordName"]
    }
  }

  if "drivers" in [tags] {
    csv {
      columns => ["Computer","DateScanned","Provider","Driver","Version","Date","Class","DriverSigned","OrginalFileName"]
    }
  }

  if "envvars" in [tags] {
    csv {
      columns => ["Computer","DateScanned","Name","UserName","VariableValue"]
    }
  }

  if "eventlogs" in [tags] {
    csv {
      columns => ["Computer","DateScanned","TimeCreated","MachineName","UserId","ProcessId","LogName","Source","LevelDisplayName","EventId","OpcodeDisplayName","TaskDisplayName","Message","RecordId","RelatedActivityId","ThreadId","Version"]
    }
  }

  if "groupmembers" in [tags] {
    csv {
      columns => ["Computer","DateScanned","UserDomain","UserName","UserSID","UserPrincipalSource","UserObjectClass","GroupName","GroupDescription","GroupSID","GroupPrincipalSource","GroupObjectClass"]
    }
  }

  if "hardware" in [tags] {
    csv {
      columns => ["Computer","DateScanned","Class","Caption","Description","DeviceID"]
    }
  }

  if "hosts" in [tags] {
    csv {
      columns => ["Computer","DateScanned","HostsIP","HostsName","HostsComment"]
    }
  }

  if "hotfixes" in [tags] {
    csv {
      columns => ["Computer","DateScanned","Operation","ResultCode","HResult","Date","Title","Description","UnmappedResultCode","ClientApplicationID","ServerSelection","ServiceID","UninstallationNotes","SupportUrl"]
    }
  }

  if "mac" in [tags] {
    csv {
      columns => ["Computer","DateScanned","FileName","Mode","Bytes","Hash","LastWriteTimeUTC","LastAccessTimeUTC","CreationTimeUTC"]
    }
  }

  if "mru" in [tags] {
    csv {
      columns => ["Computer","DateScanned","Key","Value","Data"]
    }
  }

  if "netadapters" in [tags] {
    csv {
      columns => ["Computer","DateScanned","FQDN","Description","NetConnectionID","NetConnected","InterfaceIndex","Speed","MACAddress","IPAddress","Subnet","Gateway","DNS","MTU","PromiscuousMode"]
    }
  }

  if "netroute" in [tags] {
    csv {
      columns => ["Computer","DateScanned","InterfaceIndex","InterfaceName","DestinationPrefix","NextHop","Metric","Protocol","Store","PublishedRoute","TypeOfRoute"]
    }
  }

  if "processes" in [tags] {
    csv {
      columns => ["Computer","DateScanned","ModuleCount","ThreadCount","BasePriority","Container","EnableRaisingEvents","ExitTime","Handle","HandleCount","HasExited","Id","MainModule","MainWindowHandle","MainWindowTitle","MaxWorkingSet","MinWorkingSet","Modules","NonpagedSystemMemorySize","NonpagedSystemMemorySize64","PagedMemorySize","PagedMemorySize64","PagedSystemMemorySize","PagedSystemMemorySize64","PeakPagedMemorySize","PeakPagedMemorySize64","PeakVirtualMemorySize","PeakVirtualMemorySize64","PeakWorkingSet","PeakWorkingSet64","PriorityBoostEnabled","PriorityClass","PrivateMemorySize","PrivateMemorySize64","PrivilegedProcessorTime","ProcessName","ProcessorAffinity","Responding","SessionId","Site","StandardError","StandardInput","StandardOutput","StartTime","SynchronizingObject","TotalProcessorTime","UserProcessorTime","VirtualMemorySize","VirtualMemorySize64","WorkingSet","WorkingSet64","Company","CPU","Description","FileVersion","Path","Product","ProductVersion"]
    }
  }

  if "recylcebin" in [tags] {
    csv {
      columns => ["Computer","DateScanned","LinkType","Name","Length","Directory","IsReadOnly","Exists","FullName","CreationTimeUtc","LastAccessTimeUtc","LastWriteTimeUtc","IsContainer","Mode"]
    }
  }

  if "registry" in [tags] {
    csv {
      columns => ["Computer","DateScanned","Key","Value","Data"]
    }
  }

  if "scheduledtasks" in [tags] {
    csv {
      columns => ["Computer","DateScanned","ActionsArguments","ActionsExecute","ActionsId","ActionsWorkingDirectory","Author","Description","SecurityDescriptor","Source","State","TaskName","TaskPath","TriggersDelay","TriggersEnabled","TriggersEndBoundary","TriggersExecutionTimeLimit","TriggersPSComputerName","TriggersRepetition","TriggersStartBoundary","URI"]
    }
  }

  if "services" in [tags] {
    csv {
      columns => ["Computer","DateScanned","AcceptPause","AcceptStop","Caption","CheckPoint","DelayedAutoStart","Description","DesktopInteract","DisconnectedSessions","DisplayName","ErrorControl","ExitCode","InstallDate","Name","PathName","ProcessId","ServiceSpecificExitCode","ServiceType","Started","StartMode","StartName","State","SystemName","TagId","TotalSessions","WaitHint"]
    }
  }

  if "sessions" in [tags] {
    csv {
      columns => ["Computer","DateScanned","SessionName","UserName","Id","State","Type","Device"]
    }
  }

  if "shares" in [tags] {
    csv {
      columns => ["Computer","DateScanned","Name","Path","Description","TrusteeName","TrusteeDomain","TrusteeSID","AccessType","AccessMask","SharePermissions"]
    }
  }

  if "softwtare" in [tags] {
    csv {
      columns => ["Computer","DateScanned","Publisher","DisplayName","DisplayVersion","InstallDate","InstallSource","InstallLocation","PSChildName","HelpLink"]
    }
  }

  if "strings" in [tags] {
    csv {
      columns => ["Computer","DateScanned","ProcessLocation","String"]
    }
  }

  if "tcpconnections" in [tags] {
    csv {
      columns => ["Computer","DateScanned","LocalAddress","LocalPort","RemoteAddress","RemotePort","State","AppliedSetting","OwningProcessID","OwningProcessPath"]
    }
  }

  if "tpm" in [tags] {
    csv {
      columns => ["Computer","DateScanned","TpmPresent","TpmReady","ManufacturerId","ManufacturerIdHex","ManufacturerName","ManufacturerVersion","ManagedAuthLevel","OwnerAuth","OwnerClearDisabled","AutoProvisioning","LockedOut","LockoutCount","LockoutMax","SelfTest","FirmwareVersionAtLastProvision"]
    }
  }
}


output {
  if "threcon" in [tags] { 
    stdout { codec => rubydebug } 
  }

  if "ads" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.ads"
    }
  }

  if "autoruns" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.autoruns"
    }
  }

  if "bitlocker" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.bitlocker"
    }
  }

  if "certificates" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.certificates"
    }
  }

  if "computer" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.computer"
    }
  }

  if "dlls" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.dlls"
    }
  }

  if "dns" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.dns"
    }
  }

  if "drivers" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.drivers"
    }
  }

  if "envvars" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.envvars"
    }
  }

  if "eventlogs" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.eventlogs"
    }
  }

  if "groupmembers" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.groupmembers"
    }
  }

  if "hardware" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.hardware"
    }
  }

  if "hosts" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.hosts"
    }
  }

  if "hotfixes" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.hotfixes"
    }
  }

  if "mac" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.mac"
    }
  }

  if "mru" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.mru"
    }
  }

  if "netadapters" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.netadapters"
    }
  }

  if "netroute" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.netroute"
    }
  }

  if "processes" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.processes"
    }
  }

  if "recylcebin" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.recylcebin"
    }
  }

  if "registry" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.registry"
    }
  }

  if "scheduledtasks" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.scheduledtasks"
    }
  }

  if "services" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.services"
    }
  }

  if "sessions" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.sessions"
    }
  }

  if "shares" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.shares"
    }
  }

  if "softwtare" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.softwtare"
    }
  }

  if "strings" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.strings"
    }
  }

  if "tcpconnections" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.tcpconnections"
    }
  }

  if "tpm" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "threcon.tpm"
    }
  }
}
